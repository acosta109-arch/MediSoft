@page "/Doctores/Create"
@using MediSoft.Models
@using MediSoft.Services

@inject NavigationManager NavigationManager
@inject DoctoresService doctoresService
@inject NotificationService notificationService
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService
@rendermode InteractiveServer

<PageTitle>Crear nuevo doctor</PageTitle>
@if (acceso == "permitido")
{
<EditForm Model="doctor" OnValidSubmit="Guardar" FormName="DoctorForm">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container mt-5">
        <div class="card shadow-lg border-0 rounded">
            <div class="header">
                <h3><strong>Crear nuevo doctor</strong></h3>
            </div>

            <div class="card-body p-4">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Nombre completo:</label>
                        <InputText @bind-Value="doctor.NombreCompleto" class="form-control" placeholder="Nombre completo del doctor" />
                        <ValidationMessage For="@(() => doctor.NombreCompleto)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Especialidad:</label>
                        <InputText @bind-Value="doctor.Especialidad" class="form-control" placeholder="Especialidad" />
                        <ValidationMessage For="@(() => doctor.Especialidad)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Tel&eacute;fono:</label>
                        <InputText @bind-Value="doctor.Telefono" class="form-control" placeholder="Teléfono del doctor" />
                        <ValidationMessage For="@(() => doctor.Telefono)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Email:</label>
                        <InputText @bind-Value="doctor.Email" class="form-control" placeholder="Correo electrónico del doctor" />
                        <ValidationMessage For="@(() => doctor.Email)" class="text-danger" />
                    </div>
                </div>

                <hr />

                <div class="header mb-3">
                    <h4><strong>D&iacute;as de disponibilidad del doctor</strong></h4>
                </div>

                <div class="row mb-3">
                    <div class="col-md-10">
                        <label class="form-label text-white">D&iacute;as de disponibilidad:</label>
                        <InputText class="form-control" @bind-Value="detalleDoctor.DiasDisponibilidad" placeholder="Ingrese los dias de disponibilidad" />
                        <ValidationMessage For="@(() => detalleDoctor.DiasDisponibilidad)" class="text-danger" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-success w-100 btn-custom" @onclick="AgregarDetalle"><i class="bi bi-plus-circle-fill"></i> Agregar</button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>D&iacute;as de disponibilidad</th>
                                <th>Eliminar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listaDetallesDoctor.Any())
                            {
                                @foreach (var item in listaDetallesDoctor)
                                {
                                    <tr>
                                        <td>@item.DiasDisponibilidad</td>
                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="(() => EliminarDetalle(item))"><i class="bi bi-trash3-fill"></i></button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="2">No hay d&iacute;as disponibles...</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="card-footer bg-light d-flex justify-content-between">
                <a href="/Doctores/Index" class="btn btn-danger btn-custom"><i class="fas fa-arrow-left"></i> Volver</a>
                <button type="submit" class="btn btn-success btn-custom"><i class="bi bi-save-fill"></i> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>
}

else if (acceso == "denegado")
{
    <div class="container text-center mt-5">
        <div class="error-wrapper">
            <img src="https://cdn-icons-png.flaticon.com/512/5138/5138594.png" alt="Access Denied" class="img-fluid" />
            <h1 class="mt-3">Acceso Restringido</h1>
            <p class="lead mt-3">
                Lo sentimos, pero no tienes permiso para acceder a esta página.
            </p>
            <a href="/" class="custom-btn mt-4">Volver a Inicio</a>
        </div>
    </div>

    <style>
        .container {
            max-width: 600px;
            margin: auto;
        }

        .error-wrapper {
            padding: 2rem;
            background-color: #f8d7da;
            border-radius: 10px;
            border: 1px solid #f5c6cb;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: none;
        }

        h1 {
            color: #721c24;
            font-size: 2rem;
            font-weight: 600;
        }

        .lead {
            color: #721c24;
            font-size: 1.125rem;
        }

        .custom-btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            font-size: 1.125rem;
            font-weight: 500;
            color: #fff;
            background: linear-gradient(135deg, #ff5e57, #ff8c52);
            border-radius: 50px;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
            border: none;
        }

            .custom-btn:hover {
                background: linear-gradient(135deg, #ff8c52, #ff5e57);
                color: #fff;
                box-shadow: 0 6px 8px rgba(0,0,0,0.3);
                transform: translateY(-2px);
            }

            .custom-btn:active {
                background: linear-gradient(135deg, #ff5e57, #ff8c52);
                color: #fff;
                box-shadow: 0 4px 6px rgba(0,0,0,0.2);
                transform: translateY(0);
            }
    </style>

}

@code {
    private Doctores doctor = new Doctores();
    private DetalleDoctores detalleDoctor = new DetalleDoctores();
    private List<DetalleDoctores> listaDetallesDoctor = new List<DetalleDoctores>();
    private List<ToastMessage> MensajeToast = new List<ToastMessage>();
    public string acceso = "";

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var buscado = await AutentificacionService.usuarioActual(JSRuntime, UsuariosService);
            if (buscado != null)
            {
                if (buscado.Rol == "Administrador")
                {
                    acceso = "permitido";
                }
                else
                {
                    acceso = "denegado";
                }
                StateHasChanged();
            }
            else
            {
                await AutentificacionService.CerrarSesion(JSRuntime);
            }
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    public async Task Guardar()
    {
        if (await doctoresService.DoctorExiste(doctor.NombreCompleto, doctor.Telefono, doctor.Email))
        {
            Mensaje(ToastType.Danger, "Ya existe un doctor con el mismo nombre, teléfono o correo.");
            return;
        }

        if (listaDetallesDoctor.Count > 0)
        {
            doctor.DetalleDoctores = listaDetallesDoctor;
            await doctoresService.Guardar(doctor);
            Mensaje(ToastType.Success, "Doctor guardado correctamente.");
        }
        else
        {
            Mensaje(ToastType.Danger, "El doctor no pudo ser guardado correctamente.");
        }
    }


    private void AgregarDetalle()
    {
        if (!string.IsNullOrEmpty(detalleDoctor.DiasDisponibilidad))
        {
            listaDetallesDoctor.Add(new DetalleDoctores
                {
                    DiasDisponibilidad = detalleDoctor.DiasDisponibilidad
                });
            detalleDoctor.DiasDisponibilidad = string.Empty;
        }
    }

    private void EliminarDetalle(DetalleDoctores detalle)
    {
        listaDetallesDoctor.Remove(detalle);
    }
}

<style>
    :root {
        --primary-bg-color: #f8f9fa;
        --header-bg-color: #3b5998;
        --header-text-color: white;
        --table-header-bg-color: #3b5998;
        --table-header-text-color: white;
        --table-bg-color: white;
        --btn-primary-bg-color: #3b5998;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: white;
        --card-bg-color: white;
        --card-border-color: #ddd;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --input-border-color: #ccc;
        --label-text-color: white;
    }

    [data-theme="dark"] {
        --primary-bg-color: #343a40;
        --header-bg-color: #1e2125;
        --header-text-color: #e9ecef;
        --table-header-bg-color: #1e2125;
        --table-header-text-color: #e9ecef;
        --table-bg-color: #495057;
        --btn-primary-bg-color: #1e2125;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: #e9ecef;
        --card-bg-color: #495057;
        --card-border-color: #6c757d;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        --input-border-color: #6c757d;
        --label-text-color: #e9ecef;
    }

    body {
        background-color: var(--primary-bg-color);
        color: #212529;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--header-bg-color);
        color: var(--header-text-color);
        padding: 10px 20px;
        border-radius: 8px;
    }

    .filter-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .filter-row .form-label {
            font-weight: bold;
            margin-right: 10px;
            color: var(--label-text-color);
        }

    .table-responsive {
        border-radius: 8px;
        box-shadow: var(--card-shadow);
    }

    .table thead {
        background-color: var(--table-header-bg-color);
        color: var(--table-header-text-color);
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .btn-custom {
        border-radius: 50px;
        font-size: 0.9rem;
    }

    .btn-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem;
        border-radius: 50%;
        color: var(--btn-text-color);
        transition: background-color 0.2s ease;
    }

        .btn-icon.btn-primary {
            background-color: var(--btn-primary-bg-color);
        }

        .btn-icon.btn-secondary {
            background-color: var(--btn-secondary-bg-color);
        }

        .btn-icon.btn-danger {
            background-color: var(--btn-danger-bg-color);
        }

        .btn-icon:hover {
            filter: brightness(1.2);
        }

    .form-control {
        border-color: var(--input-border-color);
    }

    .card {
        background-color: var(--card-bg-color);
        border-color: var(--card-border-color);
        box-shadow: var(--card-shadow);
    }

    .form-label {
        color: var(--label-text-color);
    }
</style>