@page "/Disponibilidades/Create"
@using MediSoft.Models
@using MediSoft.Services
@using Microsoft.AspNetCore.Mvc.Rendering

@inject NavigationManager NavigationManager
@inject DisponibilidadService DisponibilidadService
@inject DoctoresService DoctoresService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService

<PageTitle>Crear nueva disponibilidad</PageTitle>

<EditForm Model="nuevaDisponibilidad" OnValidSubmit="Guardar" FormName="DisponibilidadForm">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container mt-5">
        <div class="card shadow-lg border-0 rounded">
            <div class="header">
                <h3><strong>Crear nueva disponibilidad</strong></h3>
            </div>

            <div class="card-body p-4">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Doctor:</label>
                        <InputSelect @bind-Value="nuevaDisponibilidad.DoctorId" class="form-control">
                            <option value="">Seleccione un doctor</option>
                            @foreach (var doctor in doctores)
                            {
                                <option value="@doctor.DoctorId">@doctor.NombreCompleto</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => nuevaDisponibilidad.DoctorId)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Días de disponibilidad:</label>
                        <InputText @bind-Value="nuevaDisponibilidad.DiasDisponibilidad" class="form-control" placeholder="Días de disponibilidad" />
                        <ValidationMessage For="@(() => nuevaDisponibilidad.DiasDisponibilidad)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Consultorio:</label>
                        <InputText @bind-Value="nuevaDisponibilidad.Consultorio" class="form-control" placeholder="Consultorio" />
                        <ValidationMessage For="@(() => nuevaDisponibilidad.Consultorio)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Hora Inicio:</label>
                        <InputSelect @bind-Value="nuevaDisponibilidad.HoraInicio" class="form-control">
                            <option value="">Seleccione una hora</option>
                            @foreach (var hora in GetHoras())
                            {
                                <option value="@hora.Value">@hora.Text</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => nuevaDisponibilidad.HoraInicio)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Hora Fin:</label>
                        <InputSelect @bind-Value="nuevaDisponibilidad.HoraFin" class="form-control">
                            <option value="">Seleccione una hora</option>
                            @foreach (var hora in GetHoras())
                            {
                                <option value="@hora.Value">@hora.Text</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => nuevaDisponibilidad.HoraFin)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="card-footer bg-light d-flex justify-content-between">
                <a href="/Disponibilidades/Index" class="btn btn-danger btn-oval"><i class="fas fa-arrow-left"></i> Volver</a>
                <button type="submit" class="btn btn-success btn-oval"><i class="bi bi-save-fill"></i> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Disponibilidades nuevaDisponibilidad = new Disponibilidades();
    private List<Disponibilidades> listaDisponibilidades = new List<Disponibilidades>();
    private List<Doctores> doctores = new List<Doctores>();
    private List<ToastMessage> MensajeToast = new List<ToastMessage>();
   
    protected override async Task OnInitializedAsync()
    {
        doctores = await DoctoresService.ListarDoctores();
    }

    private List<SelectListItem> GetHoras()
    {
        var horas = new List<SelectListItem>();
        for (int i = 0; i < 24; i++)
        {
            var hora12 = i % 12 == 0 ? 12 : i % 12;
            var periodo = i < 12 ? "AM" : "PM";
            var horaTexto = $"{hora12:D2}:00 {periodo}";
            horas.Add(new SelectListItem { Value = i.ToString("00") + ":00", Text = horaTexto });
        }
        return horas;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    public async Task Guardar()
    {
        try
        {
            await DisponibilidadService.Guardar(nuevaDisponibilidad);
            Mensaje(ToastType.Success, "Disponibilidad guardada correctamente.");
            nuevaDisponibilidad = new Disponibilidades();
        }
        catch (Exception ex)
        {
            Mensaje(ToastType.Danger, $"Ocurrió un error: {ex.Message}");
        }
    }

    private void EliminarDisponibilidad(Disponibilidades disponibilidad)
    {
        listaDisponibilidades.Remove(disponibilidad);
    }
}

<style>
    :root {
        --primary-bg-color: #f8f9fa;
        --header-bg-color: #3b5998;
        --header-text-color: white;
        --table-header-bg-color: #3b5998;
        --table-header-text-color: white;
        --table-bg-color: white;
        --btn-primary-bg-color: #3b5998;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: white;
        --card-bg-color: white;
        --card-border-color: #ddd;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --input-border-color: #ccc;
        --label-text-color: white;
    }

    [data-theme="dark"] {
        --primary-bg-color: #343a40;
        --header-bg-color: #1e2125;
        --header-text-color: #e9ecef;
        --table-header-bg-color: #1e2125;
        --table-header-text-color: #e9ecef;
        --table-bg-color: #495057;
        --btn-primary-bg-color: #1e2125;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: #e9ecef;
        --card-bg-color: #495057;
        --card-border-color: #6c757d;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        --input-border-color: #6c757d;
        --label-text-color: #e9ecef;
    }

    body {
        background-color: var(--primary-bg-color);
        color: #212529;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--header-bg-color);
        padding: 1rem;
        color: var(--header-text-color);
    }

        .header h3 { 
            margin: 0;
        }

    .card {
        background-color: var(--card-bg-color);
        border: 1px solid var(--card-border-color);
        box-shadow: var(--card-shadow);
    }

    .card-footer {
        background-color: var(--primary-bg-color);
    }

    .form-label {
        color: var(--label-text-color);
    }

    .form-control {
        border: 1px solid var(--input-border-color);
    }

    .btn-oval {
        border-radius: 25px;
        border: none; 
    }

        .btn-oval:hover {
            background-color: var(--btn-secondary-bg-color);
        }

    .btn-danger {
        background-color: var(--btn-danger-bg-color);
        color: var(--btn-text-color);
        border-radius: 25px;
        border: none; 
    }

        .btn-danger:hover {
            background-color: var(--btn-danger-bg-color);
        }
</style>
