@page "/Historial/Index"
@inject CitasService citasService
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@inject UsuariosService UsuariosService
@inject AutentificacionService AutentificacionService

<PageTitle>Historial de citas</PageTitle>

<style>
    :root {
        --primary-bg-color: #f8f9fa;
        --header-bg-color: #3b5998;
        --header-text-color: white; 
        --table-header-bg-color: #3b5998; 
        --table-header-text-color: white;
        --table-bg-color: white; 
        --btn-primary-bg-color: #3b5998; 
        --btn-secondary-bg-color: #6c757d; 
        --btn-danger-bg-color: #dc3545; 
        --btn-text-color: white; 
        --card-bg-color: white;
        --card-border-color: #ddd; 
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --input-border-color: #ccc; 
        --label-text-color: #000; 
    }

    [data-theme="dark"] {
        --primary-bg-color: #343a40; 
        --header-bg-color: #1e2125;
        --header-text-color: #e9ecef; 
        --table-header-bg-color: #1e2125; 
        --table-header-text-color: #e9ecef; 
        --table-bg-color: #495057;
        --btn-primary-bg-color: #1e2125;
        --btn-secondary-bg-color: #6c757d; 
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: #e9ecef;
        --card-bg-color: #495057; 
        --card-border-color: #6c757d; 
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        --input-border-color: #6c757d; 
        --label-text-color: #e9ecef; 
    }

    body {
        background-color: var(--primary-bg-color);
        color: #212529;
    }

    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
        background-color: var(--card-bg-color); 
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--header-bg-color);
        color: var(--header-text-color);
        padding: 10px 20px;
        border-radius: 8px;
    }

        .header h3 {
            margin: 0;
        }

    .filter-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .filter-row .form-label {
            font-weight: bold;
            margin-right: 10px;
            color: var(--label-text-color); 
        }

    .table-responsive {
        border-radius: 8px;
        box-shadow: var(--card-shadow);
    }

    .table thead {
        background-color: var(--table-header-bg-color);
        color: var(--table-header-text-color);
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .btn-custom {
        border-radius: 50px;
        font-size: 0.9rem;
    }

    .btn-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem;
        border-radius: 50%;
        color: var(--btn-text-color);
        transition: background-color 0.2s ease;
    }

        .btn-icon.btn-primary {
            background-color: var(--btn-primary-bg-color);
        }

        .btn-icon.btn-secondary {
            background-color: var(--btn-secondary-bg-color);
        }

        .btn-icon.btn-danger {
            background-color: var(--btn-danger-bg-color);
        }

        .btn-icon:hover {
            filter: brightness(1.2);
        }

    .form-control {
        border-color: var(--input-border-color);
    }

    .card {
        background-color: var(--card-bg-color);
        border-color: var(--card-border-color);
        box-shadow: var(--card-shadow);
    }
</style>

<div class="container mt-5">
    <div class="header">
        <h3><strong>Historial de pacientes</strong></h3>
    </div>

    <div class="filter-row">
        <div class="d-flex align-items-center">
            <label for="Filtro" class="form-label"><strong>Filtrar por:</strong></label>
            <InputSelect id="filtro" class="form-select" @bind-Value="filtro">
                <option value="" disabled>Seleccionar</option>
                <option value="doctor">Doctor</option>
                <option value="paciente">Paciente</option>
                <option value="fecha">Fecha</option>
            </InputSelect>
        </div>
        <div class="input-group">
            <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
            <button @onclick="Buscar" class="btn btn-primary" type="button">
                <span class="bi bi-search-heart-fill"></span> Buscar
            </button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered mt-3">
            <thead class="table-striped table-secondary text-black">
                <tr>
                    <th>ID</th>
                    <th>Nombre completo</th>
                    <th>Cédula</th>
                    <th>Número de seguro</th>
                    <th>Teléfono</th>
                    <th>Doctor</th>
                    <th>Fecha y Hora</th>
                    <th>Motivo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cita in citasFiltradas)
                {
                    <tr>
                        <td>PA-@cita.CitaId</td>
                        <td>@cita.NombreCompleto</td>
                        <td>@cita.Cedula</td>
                        <td>@cita.NumeroSeguro</td>
                        <td>@cita.Telefono</td>
                        <td>@cita.Doctor?.NombreCompleto</td>
                        <td>@cita.Fecha.ToString("dd/MM/yyyy hh:mm tt")</td>
                        <td>@cita.Motivo</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public List<Citas> citas = new List<Citas>();
    public List<Citas> citasFiltradas = new List<Citas>();
    public string filtro { get; set; } = "doctor";
    public string valorFiltro { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        citas = await citasService.ListarCitas();
        citasFiltradas = citas;
    }

    private void Buscar()
    {
        if (string.IsNullOrEmpty(valorFiltro))
        {
            citasFiltradas = citas;
        }
        else
        {
            switch (filtro)
            {
                case "doctor":
                    citasFiltradas = citas
                        .Where(c => c.Doctor != null &&
                                    (c.Doctor.NombreCompleto)
                                    .Contains(valorFiltro, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                case "paciente":
                    citasFiltradas = citas
                        .Where(c => (c.NombreCompleto)
                                    .Contains(valorFiltro, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                case "fecha":
                    if (DateTime.TryParse(valorFiltro, out DateTime fecha))
                    {
                        citasFiltradas = citas.Where(c => c.Fecha.Date == fecha.Date).ToList();
                    }
                    break;
            }
        }
    }
}
