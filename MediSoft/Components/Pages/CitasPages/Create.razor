@page "/Citas/Create/{CitaId:int}"
@using MediSoft.Models
@using MediSoft.Services
@using Microsoft.AspNetCore.Mvc.Rendering

@inject NavigationManager navigation
@inject CitasService CitasService
@inject DoctoresService DoctoresService
@inject NotificationService NotificationService

<PageTitle>Agregar cita</PageTitle>

<EditForm Model="nuevaCita" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container mt-5">
        <div class="card shadow-lg border-0 rounded">
            <div class="header">
                <h3><strong>Crear Cita</strong></h3>
            </div>

            <div class="card-body p-4">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Nombre completo del paciente:</label>
                        <InputText id="nombre" class="form-control" @bind-Value="nuevaCita.NombreCompleto" placeholder="Nombre completo de paciente" />
                        <ValidationMessage For="@(() => nuevaCita.NombreCompleto)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Cédula:</label>
                        <InputText id="cedula" class="form-control" @bind-Value="nuevaCita.Cedula" placeholder="Cédula del paciente"/>
                        <ValidationMessage For="@(() => nuevaCita.Cedula)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Número de Seguro Médico:</label>
                        <InputText id="numeroSeguro" class="form-control" @bind-Value="nuevaCita.NumeroSeguro" placeholder="Número de seguro médico"/>
                        <ValidationMessage For="@(() => nuevaCita.NumeroSeguro)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Teléfono:</label>
                        <InputText id="telefono" class="form-control" @bind-Value="nuevaCita.Telefono" placeholder="Teléfono"/>
                        <ValidationMessage For="@(() => nuevaCita.Telefono)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label text-black">Seleccionar Doctor:</label>
                        <InputSelect id="doctorSelect" class="form-control" @bind-Value="nuevaCita.DoctorId">
                            <option value="">Seleccione un doctor</option>
                            @foreach (var doctor in doctores)
                            {
                                <option value="@doctor.DoctorId">@doctor.NombreCompleto</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => nuevaCita.DoctorId)" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label text-black">Fecha y Hora:</label>
                        <input type="datetime-local" class="form-control" @bind="nuevaCita.Fecha" />
                        <ValidationMessage For="@(() => nuevaCita.Fecha)" class="text-danger" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label text-black">Motivo:</label>
                        <InputText id="causa" class="form-control" @bind-Value="nuevaCita.Motivo" placeholder="Motivo de cita"/>
                        <ValidationMessage For="@(() => nuevaCita.Motivo)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="card-footer bg-light d-flex justify-content-between">
                <button type="button" class="btn btn-danger btn-oval" @onclick="Volver"><i class="fas fa-arrow-left"></i> Volver</button>
                <button type="submit" class="btn btn-success btn-oval"><i class="bi bi-save-fill"></i> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CitaId { get; set; }
    private List<Doctores> doctores = new List<Doctores>();
    private Citas nuevaCita = new Citas();
    private List<ToastMessage> MensajeToast = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        doctores = await DoctoresService.ListarDoctores();
        
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    public async Task Guardar()
    {
        try
        {
            // Validar que la fecha y la hora de la cita no sean anteriores a la actualidad
            if (nuevaCita.Fecha < DateTime.Now)
            {
                Mensaje(ToastType.Danger, "La fecha y hora de la cita no pueden ser anteriores a la actualidad.");
                return;
            }

            // Verificar si ya existe una cita con los mismos detalles
            var citasExistentes = await CitasService.ObtenerCitasPorDetalles(nuevaCita.NombreCompleto, nuevaCita.Cedula, nuevaCita.NumeroSeguro, nuevaCita.Telefono);
            if (citasExistentes.Any())
            {
                Mensaje(ToastType.Danger, "Ya existe una cita con el mismo nombre, cédula, número de seguro médico o teléfono.");
                return;
            }

            // Guardar la nueva cita
            await CitasService.Guardar(nuevaCita);
            Mensaje(ToastType.Success, "Cita guardada correctamente.");
            nuevaCita = new Citas();
        }
        catch (Exception ex)
        {
            Mensaje(ToastType.Danger, $"Ocurrió un error: {ex.Message}");
        }
    }




    public void Volver()
    {
        navigation.NavigateTo("/DisponibilidadesCards");
    }
}

<style>
    :root {
        --primary-bg-color: #f8f9fa;
        --header-bg-color: #3b5998;
        --header-text-color: white;
        --table-header-bg-color: #3b5998;
        --table-header-text-color: white;
        --table-bg-color: white;
        --btn-primary-bg-color: #3b5998;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: white;
        --card-bg-color: white;
        --card-border-color: #ddd;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --input-border-color: #ccc;
        --label-text-color: white;
    }

    [data-theme="dark"] {
        --primary-bg-color: #343a40;
        --header-bg-color: #1e2125;
        --header-text-color: #e9ecef;
        --table-header-bg-color: #1e2125;
        --table-header-text-color: #e9ecef;
        --table-bg-color: #495057;
        --btn-primary-bg-color: #1e2125;
        --btn-secondary-bg-color: #6c757d;
        --btn-danger-bg-color: #dc3545;
        --btn-text-color: #e9ecef;
        --card-bg-color: #495057;
        --card-border-color: #6c757d;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        --input-border-color: #6c757d;
        --label-text-color: #e9ecef;
    }

    body {
        background-color: var(--primary-bg-color);
        color: #212529;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--header-bg-color);
        padding: 1rem;
        color: var(--header-text-color);
    }

        .header h3 {
            margin: 0;
        }

    .card {
        background-color: var(--card-bg-color);
        border: 1px solid var(--card-border-color);
        box-shadow: var(--card-shadow);
    }

    .card-footer {
        background-color: var(--primary-bg-color);
    }

    .form-label {
        color: var(--label-text-color);
    }

    .form-control {
        border: 1px solid var(--input-border-color);
    }

    .btn-oval {
        border-radius: 25px;
        border: none; 
    }

    .btn-danger {
        background-color: var(--btn-danger-bg-color);
        color: var(--btn-text-color);
        border-radius: 25px;
        border: none; 
    }

        .btn-danger:hover {
            background-color: var(--btn-danger-bg-color);
        }

    .btn-success {
        border-radius: 25px;
        border: none; 
    }

        .btn-success:hover {
        }
</style>
